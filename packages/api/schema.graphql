scalar Date

type Card {
  id: ID!
  deckId: ID!
  term: String!
  definition: String!
  lastView: Date
  lastDifficulty: Int
}

type Deck {
  id: String!
  title: String!
}

type DeckWithCards {
  id: String!
  title: String!
  cards: [Card!]!
}

type Error {
  name: String!
  message: String!
}

type DeckQueryResponse {
  statusCode: Int!
  body: DeckWithCards
  error: Error
}

type DecksQueryResponse {
  statusCode: Int!
  body: [Deck!]
  error: Error
}

type AddCardMutationResponse {
  statusCode: Int!
  body: Card
  error: Error
}

type AddDeckMutationResponse {
  statusCode: Int!
  body: Deck
  error: Error
}

type CardDoneMutationResponse {
  statusCode: Int!
  body: Card
  error: Error
}

type DeleteDeckMutationResponse {
  statusCode: Int!
  body: Deck
  error: Error
}

type RenameDeckMutationResponse {
  statusCode: Int!
  body: Deck
  error: Error
}

type CardsQueryResponse {
  statusCode: Int!
  body: [Card!]
  error: Error
}

type VerifyEmailQueryResponse {
  statusCode: Int!
  body: String
  error: Error
}

type Query {
  deck(id: ID!): DeckQueryResponse!
  decks: DecksQueryResponse!
  cards: CardsQueryResponse!
  verifyEmail(email: String!): VerifyEmailQueryResponse!
}

type Mutation {
  addCard(deckId: ID!, term: String!, definition: String!): AddCardMutationResponse!
  addDeck(title: String!): AddDeckMutationResponse!
  cardDone(cardId: ID!, difficulty: Int!): CardDoneMutationResponse!
  deleteDeck(id: ID!): DeleteDeckMutationResponse!
  renameDeck(id: ID!, title: String!): RenameDeckMutationResponse!
}
